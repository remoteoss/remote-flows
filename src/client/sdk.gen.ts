// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from '@hey-api/client-fetch';
import type {
  GetIndexOffboardingData,
  GetIndexOffboardingResponse,
  GetIndexOffboardingError,
  PostCreateOffboardingData,
  PostCreateOffboardingResponse,
  PostCreateOffboardingError,
  GetShowTimesheetData,
  GetShowTimesheetResponse,
  GetShowTimesheetError,
  PostUpdateCancelOnboardingData,
  PostUpdateCancelOnboardingResponse,
  PostUpdateCancelOnboardingError,
  GetShowContractAmendmentSchemaData,
  GetShowContractAmendmentSchemaResponse,
  GetShowContractAmendmentSchemaError,
  GetIndexDataSyncData,
  GetIndexDataSyncResponse,
  GetIndexDataSyncError,
  PostCreateDataSyncData,
  PostCreateDataSyncError,
  GetIndexCompanyPricingPlanData,
  GetIndexCompanyPricingPlanResponse,
  GetIndexCompanyPricingPlanError,
  PostCreateCompanyPricingPlanData,
  PostCreateCompanyPricingPlanResponse,
  PostCreateCompanyPricingPlanError,
  GetShowProbationCompletionLetterData,
  GetShowProbationCompletionLetterResponse,
  GetShowProbationCompletionLetterError,
  GetShowContractorInvoiceData,
  GetShowContractorInvoiceResponse,
  GetShowContractorInvoiceError,
  GetIndexEmploymentData,
  GetIndexEmploymentResponse,
  GetIndexEmploymentError,
  PostCreateEmployment2Data,
  PostCreateEmployment2Response,
  PostCreateEmployment2Error,
  GetIndexContractorInvoiceData,
  GetIndexContractorInvoiceResponse,
  GetIndexContractorInvoiceError,
  GetDetailsSsoConfigurationData,
  GetDetailsSsoConfigurationResponse,
  GetDetailsSsoConfigurationError,
  PostCreateEstimationData,
  PostCreateEstimationResponse,
  PostCreateEstimationError,
  GetShowCompanySchemaData,
  GetShowCompanySchemaResponse,
  GetShowCompanySchemaError,
  GetIndexBenefitOfferData,
  GetIndexBenefitOfferResponse,
  GetIndexBenefitOfferError,
  PutUpdateBenefitOfferData,
  PutUpdateBenefitOfferResponse,
  PutUpdateBenefitOfferError,
  GetGetIdentityVerificationDataIdentityVerificationData,
  GetGetIdentityVerificationDataIdentityVerificationResponse,
  GetGetIdentityVerificationDataIdentityVerificationError,
  PostBypassEligibilityChecksCompanyData,
  PostBypassEligibilityChecksCompanyResponse,
  PostBypassEligibilityChecksCompanyError,
  GetShowTestSchemaData,
  GetShowTestSchemaResponse,
  GetIndexHolidayData,
  GetIndexHolidayResponse,
  GetIndexHolidayError,
  PostCreateCancellationData,
  PostCreateCancellationResponse,
  PostCreateCancellationError,
  GetIndexEmploymentJobData,
  GetIndexEmploymentJobResponse,
  GetIndexEmploymentJobError,
  GetIndexPricingPlanPartnerTemplateData,
  GetIndexPricingPlanPartnerTemplateResponse,
  GetIndexPricingPlanPartnerTemplateError,
  GetIndexEorPayrollCalendarData,
  GetIndexEorPayrollCalendarResponse,
  GetIndexEorPayrollCalendarError,
  GetIndexRecurringIncentiveData,
  GetIndexRecurringIncentiveResponse,
  GetIndexRecurringIncentiveError,
  PostCreateRecurringIncentiveData,
  PostCreateRecurringIncentiveResponse,
  PostCreateRecurringIncentiveError,
  PostCreateBenefitRenewalRequestData,
  PostCreateBenefitRenewalRequestResponse,
  PostCreateBenefitRenewalRequestError,
  GetIndexExpenseData,
  GetIndexExpenseResponse,
  GetIndexExpenseError,
  PostCreateExpenseData,
  PostCreateExpenseResponse,
  PostCreateExpenseError,
  GetShowSsoConfigurationData,
  GetShowSsoConfigurationResponse,
  GetShowSsoConfigurationError,
  PostCreateSsoConfigurationData,
  PostCreateSsoConfigurationResponse,
  PostCreateSsoConfigurationError,
  PutApproveContractAmendmentData,
  PutApproveContractAmendmentResponse,
  PutApproveContractAmendmentError,
  GetSchemaBenefitRenewalRequestData,
  GetSchemaBenefitRenewalRequestResponse,
  GetSchemaBenefitRenewalRequestError,
  PostGenerateMagicLinkData,
  PostGenerateMagicLinkResponse,
  PostGenerateMagicLinkError,
  DeleteDeleteRecurringIncentiveData,
  DeleteDeleteRecurringIncentiveResponse,
  DeleteDeleteRecurringIncentiveError,
  GetIndexIncentiveData,
  GetIndexIncentiveResponse,
  GetIndexIncentiveError,
  PostCreateIncentiveData,
  PostCreateIncentiveResponse,
  PostCreateIncentiveError,
  PostCreateProbationCompletionLetterData,
  PostCreateProbationCompletionLetterResponse,
  PostCreateProbationCompletionLetterError,
  GetShowScheduledContractorInvoiceData,
  GetShowScheduledContractorInvoiceResponse,
  GetShowScheduledContractorInvoiceError,
  PatchUpdateScheduledContractorInvoice2Data,
  PatchUpdateScheduledContractorInvoice2Response,
  PatchUpdateScheduledContractorInvoice2Error,
  PatchUpdateScheduledContractorInvoiceData,
  PatchUpdateScheduledContractorInvoiceResponse,
  PatchUpdateScheduledContractorInvoiceError,
  GetShowBillingDocumentData,
  GetShowBillingDocumentResponse,
  GetShowBillingDocumentError,
  PostCreateEstimationPdfData,
  PostCreateEstimationPdfResponse,
  PostCreateEstimationPdfError,
  GetShowWorkAuthorizationRequestData,
  GetShowWorkAuthorizationRequestResponse,
  GetShowWorkAuthorizationRequestError,
  PatchUpdateWorkAuthorizationRequest2Data,
  PatchUpdateWorkAuthorizationRequest2Response,
  PatchUpdateWorkAuthorizationRequest2Error,
  PatchUpdateWorkAuthorizationRequestData,
  PatchUpdateWorkAuthorizationRequestResponse,
  PatchUpdateWorkAuthorizationRequestError,
  PostCreateProbationExtensionData,
  PostCreateProbationExtensionResponse,
  PostCreateProbationExtensionError,
  PostCreateRiskReserveData,
  PostCreateRiskReserveResponse,
  PostCreateRiskReserveError,
  GetShowCompanyData,
  GetShowCompanyResponse,
  GetShowCompanyError,
  PatchUpdateCompany2Data,
  PatchUpdateCompany2Response,
  PatchUpdateCompany2Error,
  PatchUpdateCompanyData,
  PatchUpdateCompanyResponse,
  PatchUpdateCompanyError,
  GetDownloadResignationLetterData,
  GetDownloadResignationLetterResponse,
  GetDownloadResignationLetterError,
  GetIndexContractAmendmentData,
  GetIndexContractAmendmentResponse,
  GetIndexContractAmendmentError,
  PostCreateContractAmendmentData,
  PostCreateContractAmendmentResponse,
  PostCreateContractAmendmentError,
  GetShowPayrollRunData,
  GetShowPayrollRunResponse,
  GetShowPayrollRunError,
  GetDownloadExpenseReceiptData,
  GetDownloadExpenseReceiptResponse,
  GetDownloadExpenseReceiptError,
  GetShowTravelLetterRequestData,
  GetShowTravelLetterRequestResponse,
  GetShowTravelLetterRequestError,
  PatchUpdateTravelLetterRequest2Data,
  PatchUpdateTravelLetterRequest2Response,
  PatchUpdateTravelLetterRequest2Error,
  PatchUpdateTravelLetterRequestData,
  PatchUpdateTravelLetterRequestResponse,
  PatchUpdateTravelLetterRequestError,
  GetShowTimeoffBalanceData,
  GetShowTimeoffBalanceResponse,
  GetShowTimeoffBalanceError,
  GetShowFormCountryData,
  GetShowFormCountryResponse,
  GetShowFormCountryError,
  GetShowFileData,
  GetShowFileResponse,
  GetShowFileError,
  GetShowContractAmendmentData,
  GetShowContractAmendmentResponse,
  GetShowContractAmendmentError,
  GetIndexCompanyManagerData,
  GetIndexCompanyManagerResponse,
  GetIndexCompanyManagerError,
  PostCreateCompanyManagerData,
  PostCreateCompanyManagerResponse,
  PostCreateCompanyManagerError,
  GetIndexCountryData,
  GetIndexCountryResponse,
  PostDeclineIdentityVerificationData,
  PostDeclineIdentityVerificationResponse,
  PostDeclineIdentityVerificationError,
  GetIndexBillingDocumentData,
  GetIndexBillingDocumentResponse,
  GetIndexBillingDocumentError,
  DeleteDeleteWebhookCallbackData,
  DeleteDeleteWebhookCallbackResponse,
  DeleteDeleteWebhookCallbackError,
  PatchUpdateWebhookCallbackData,
  PatchUpdateWebhookCallbackResponse,
  PatchUpdateWebhookCallbackError,
  GetIndexTravelLetterRequestData,
  GetIndexTravelLetterRequestResponse,
  GetIndexTravelLetterRequestError,
  GetIndexBenefitRenewalRequestData,
  GetIndexBenefitRenewalRequestResponse,
  GetIndexBenefitRenewalRequestError,
  PostCreateWebhookCallbackData,
  PostCreateWebhookCallbackResponse,
  PostCreateWebhookCallbackError,
  PostApproveTimesheetData,
  PostApproveTimesheetResponse,
  PostApproveTimesheetError,
  GetShowPayslipData,
  GetShowPayslipResponse,
  GetShowPayslipError,
  GetIndexLeavePoliciesSummaryData,
  GetIndexLeavePoliciesSummaryResponse,
  GetIndexLeavePoliciesSummaryError,
  GetIndexCompanyDepartmentData,
  GetIndexCompanyDepartmentResponse,
  GetIndexCompanyDepartmentError,
  PostCreateCompanyDepartmentData,
  PostCreateCompanyDepartmentResponse,
  PostCreateCompanyDepartmentError,
  PostDeclineCancellationRequestData,
  PostDeclineCancellationRequestResponse,
  PostDeclineCancellationRequestError,
  GetShowSchemaData,
  GetShowSchemaResponse,
  GetShowSchemaError,
  GetIndexTimesheetData,
  GetIndexTimesheetResponse,
  GetIndexTimesheetError,
  GetShowEmploymentData,
  GetShowEmploymentResponse,
  GetShowEmploymentError,
  PatchUpdateEmployment2Data,
  PatchUpdateEmployment2Response,
  PatchUpdateEmployment2Error,
  PatchUpdateEmploymentData,
  PatchUpdateEmploymentResponse,
  PatchUpdateEmploymentError,
  GetIndexPayrollCalendarData,
  GetIndexPayrollCalendarResponse,
  GetIndexPayrollCalendarError,
  GetShowRegionFieldData,
  GetShowRegionFieldResponse,
  GetShowRegionFieldError,
  GetShowOffboardingData,
  GetShowOffboardingResponse,
  GetShowOffboardingError,
  PostCreateEmploymentData,
  PostCreateEmploymentResponse,
  PostCreateEmploymentError,
  GetSupportedCountryData,
  GetSupportedCountryResponse,
  GetSupportedCountryError,
  PostCompleteOnboardingEmploymentData,
  PostCompleteOnboardingEmploymentResponse,
  PostCompleteOnboardingEmploymentError,
  GetIndexLeavePoliciesDetailsData,
  GetIndexLeavePoliciesDetailsResponse,
  GetIndexLeavePoliciesDetailsError,
  GetTimeoffTypesTimeoffData,
  GetTimeoffTypesTimeoffResponse,
  GetTimeoffTypesTimeoffError,
  PostTriggerWebhookCallbackData,
  PostTriggerWebhookCallbackResponse,
  PostTriggerWebhookCallbackError,
  GetDownloadPayslipPayslipData,
  GetDownloadPayslipPayslipResponse,
  GetDownloadPayslipPayslipError,
  GetShowTimeoffData,
  GetShowTimeoffResponse,
  GetShowTimeoffError,
  PatchUpdateTimeoff2Data,
  PatchUpdateTimeoff2Response,
  PatchUpdateTimeoff2Error,
  PatchUpdateTimeoffData,
  PatchUpdateTimeoffResponse,
  PatchUpdateTimeoffError,
  PostCreateDeclineData,
  PostCreateDeclineResponse,
  PostCreateDeclineError,
  PostAutomatableContractAmendmentData,
  PostAutomatableContractAmendmentResponse,
  PostAutomatableContractAmendmentError,
  PostCreateApprovalData,
  PostCreateApprovalResponse,
  PostCreateApprovalError,
  GetIndexEmploymentCustomFieldData,
  GetIndexEmploymentCustomFieldResponse,
  GetIndexEmploymentCustomFieldError,
  PostCreateEmploymentCustomFieldData,
  PostCreateEmploymentCustomFieldResponse,
  PostCreateEmploymentCustomFieldError,
  GetIndexCompanyCurrencyData,
  GetIndexCompanyCurrencyResponse,
  GetIndexCompanyCurrencyError,
  PatchUpdateEmployment4Data,
  PatchUpdateEmployment4Response,
  PatchUpdateEmployment4Error,
  PatchUpdateEmployment3Data,
  PatchUpdateEmployment3Response,
  PatchUpdateEmployment3Error,
  GetPendingChangesEmploymentContractData,
  GetPendingChangesEmploymentContractResponse,
  GetPendingChangesEmploymentContractError,
  GetShowResignationData,
  GetShowResignationResponse,
  GetShowResignationError,
  PostUploadEmployeeFileFileData,
  PostUploadEmployeeFileFileResponse,
  PostUploadEmployeeFileFileError,
  PostInviteEmploymentInvitationData,
  PostInviteEmploymentInvitationResponse,
  PostInviteEmploymentInvitationError,
  GetShowExpenseData,
  GetShowExpenseResponse,
  GetShowExpenseError,
  PatchUpdateExpense2Data,
  PatchUpdateExpense2Response,
  PatchUpdateExpense2Error,
  PatchUpdateExpenseData,
  PatchUpdateExpenseResponse,
  PatchUpdateExpenseError,
  GetShowBenefitRenewalRequestData,
  GetShowBenefitRenewalRequestResponse,
  GetShowBenefitRenewalRequestError,
  PostUpdateBenefitRenewalRequestData,
  PostUpdateBenefitRenewalRequestResponse,
  PostUpdateBenefitRenewalRequestError,
  GetIndexEmploymentCompanyStructureNodeData,
  GetIndexEmploymentCompanyStructureNodeResponse,
  GetIndexEmploymentCompanyStructureNodeError,
  GetIndexEmploymentCustomFieldValueData,
  GetIndexEmploymentCustomFieldValueResponse,
  GetIndexEmploymentCustomFieldValueError,
  PutValidateResignationData,
  PutValidateResignationResponse,
  PutValidateResignationError,
  GetShowEmploymentCustomFieldValueData,
  GetShowEmploymentCustomFieldValueResponse,
  GetShowEmploymentCustomFieldValueError,
  PatchUpdateEmploymentCustomFieldValue2Data,
  PatchUpdateEmploymentCustomFieldValue2Response,
  PatchUpdateEmploymentCustomFieldValue2Error,
  PatchUpdateEmploymentCustomFieldValueData,
  PatchUpdateEmploymentCustomFieldValueResponse,
  PatchUpdateEmploymentCustomFieldValueError,
  GetCurrentIdentityData,
  GetCurrentIdentityResponse,
  GetCurrentIdentityError,
  DeleteDeleteIncentiveData,
  DeleteDeleteIncentiveResponse,
  DeleteDeleteIncentiveError,
  GetShowIncentiveData,
  GetShowIncentiveResponse,
  GetShowIncentiveError,
  PatchUpdateIncentive2Data,
  PatchUpdateIncentive2Response,
  PatchUpdateIncentive2Error,
  PatchUpdateIncentiveData,
  PatchUpdateIncentiveResponse,
  PatchUpdateIncentiveError,
  GetIndexWorkAuthorizationRequestData,
  GetIndexWorkAuthorizationRequestResponse,
  GetIndexWorkAuthorizationRequestError,
  GetIndexBenefitOffersCountrySummaryData,
  GetIndexBenefitOffersCountrySummaryResponse,
  GetIndexBenefitOffersCountrySummaryError,
  GetIndexBenefitOffersByEmploymentData,
  GetIndexBenefitOffersByEmploymentResponse,
  GetIndexBenefitOffersByEmploymentError,
  PutCancelContractAmendmentData,
  PutCancelContractAmendmentResponse,
  PutCancelContractAmendmentError,
  GetShowProbationExtensionData,
  GetShowProbationExtensionResponse,
  GetShowProbationExtensionError,
  GetIndexPayslipData,
  GetIndexPayslipResponse,
  GetIndexPayslipError,
  GetDownloadByIdExpenseReceiptData,
  GetDownloadByIdExpenseReceiptResponse,
  GetDownloadByIdExpenseReceiptError,
  PostTokenOAuth2TokenData,
  PostTokenOAuth2TokenResponse,
  PostTokenOAuth2TokenError,
  GetIndexTimeoffData,
  GetIndexTimeoffResponse,
  GetIndexTimeoffError,
  PostCreateTimeoffData,
  PostCreateTimeoffResponse,
  PostCreateTimeoffError,
  GetIndexPayrollRunData,
  GetIndexPayrollRunResponse,
  GetIndexPayrollRunError,
  GetIndexEmploymentContractData,
  GetIndexEmploymentContractResponse,
  GetIndexEmploymentContractError,
  GetIndexCompanyData,
  GetIndexCompanyResponse,
  GetIndexCompanyError,
  PostCreateCompanyData,
  PostCreateCompanyResponse,
  PostCreateCompanyError,
  PostSendBackTimesheetData,
  PostSendBackTimesheetResponse,
  PostSendBackTimesheetError,
  DeleteDeleteCompanyManagerData,
  DeleteDeleteCompanyManagerResponse,
  DeleteDeleteCompanyManagerError,
  GetShowCompanyManagerData,
  GetShowCompanyManagerResponse,
  GetShowCompanyManagerError,
  GetIndexScheduledContractorInvoiceData,
  GetIndexScheduledContractorInvoiceResponse,
  GetIndexScheduledContractorInvoiceError,
  PostBulkCreateScheduledContractorInvoiceData,
  PostBulkCreateScheduledContractorInvoiceResponse,
  PostBulkCreateScheduledContractorInvoiceError,
  GetGetBreakdownBillingDocumentData,
  GetGetBreakdownBillingDocumentResponse,
  GetGetBreakdownBillingDocumentError,
  PostApproveCancellationRequestData,
  PostApproveCancellationRequestResponse,
  PostApproveCancellationRequestError,
  PostVerifyIdentityVerificationData,
  PostVerifyIdentityVerificationResponse,
  PostVerifyIdentityVerificationError,
  GetDownloadPdfBillingDocumentData,
  GetDownloadPdfBillingDocumentResponse,
  GetDownloadPdfBillingDocumentError,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * List Offboarding
 * Lists Offboarding requests.
 */
export const getIndexOffboarding = <ThrowOnError extends boolean = false>(
  options?: Options<GetIndexOffboardingData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetIndexOffboardingResponse,
    GetIndexOffboardingError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/offboardings',
    ...options,
  });
};

/**
 * Create Offboarding
 * Creates an Offboarding request.
 *
 */
export const postCreateOffboarding = <ThrowOnError extends boolean = false>(
  options?: Options<PostCreateOffboardingData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostCreateOffboardingResponse,
    PostCreateOffboardingError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/offboardings',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Show timesheet
 * Shows a timesheet by its ID.
 */
export const getShowTimesheet = <ThrowOnError extends boolean = false>(
  options: Options<GetShowTimesheetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowTimesheetResponse,
    GetShowTimesheetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/timesheets/{id}',
    ...options,
  });
};

/**
 * Cancel onboarding
 * Cancel onboarding.
 *
 * Requirements for the cancellation to succeed:
 *
 * * Employment has to be in `invited`, `created`, `created_awaiting_reserve`, `created_reserve_paid`, `pre_hire` status
 * * Employee must not have signed the employment contract
 *
 */
export const postUpdateCancelOnboarding = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostUpdateCancelOnboardingData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostUpdateCancelOnboardingResponse,
    PostUpdateCancelOnboardingError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/cancel-onboarding/{employment_id}',
    ...options,
  });
};

/**
 * Show form schema
 * Returns the json schema of the `contract_amendment` form for a specific employment.
 * This endpoint requires a company access token, as forms are dependent on certain
 * properties of companies and their current employments.
 *
 */
export const getShowContractAmendmentSchema = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetShowContractAmendmentSchemaData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowContractAmendmentSchemaResponse,
    GetShowContractAmendmentSchemaError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/contract-amendments/schema',
    ...options,
  });
};

/**
 * Get latest data sync events
 * Get the latest data sync events for each data type that have passed
 *
 */
export const getIndexDataSync = <ThrowOnError extends boolean = false>(
  options?: Options<GetIndexDataSyncData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetIndexDataSyncResponse,
    GetIndexDataSyncError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/data-sync',
    ...options,
  });
};

/**
 * Create test data sync job
 * Create Test Data Synchronization job that will sync test data to the database from production
 * The job will be handled asynchronously and the response will be a 202 status code.
 *
 * **Heads up:** This endpoint is only available for specific usecases and should not be used for general data sync needs,
 * if you need to request access to this endpoint, please contact the api-support@remote.com.
 *
 */
export const postCreateDataSync = <ThrowOnError extends boolean = false>(
  options: Options<PostCreateDataSyncData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    PostCreateDataSyncError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/data-sync',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List pricing plans
 * List all pricing plans for a company.
 *
 */
export const getIndexCompanyPricingPlan = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetIndexCompanyPricingPlanData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexCompanyPricingPlanResponse,
    GetIndexCompanyPricingPlanError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/companies/{company_id}/pricing-plans',
    ...options,
  });
};

/**
 * Create a pricing plan for a company from a partner template
 * Create a pricing plan for a company from a partner template.
 *
 */
export const postCreateCompanyPricingPlan = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostCreateCompanyPricingPlanData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateCompanyPricingPlanResponse,
    PostCreateCompanyPricingPlanError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/companies/{company_id}/pricing-plans',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Show probation completion letter
 * Show a single probation completion letter.
 */
export const getShowProbationCompletionLetter = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetShowProbationCompletionLetterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowProbationCompletionLetterResponse,
    GetShowProbationCompletionLetterError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/probation-completion-letter/{id}',
    ...options,
  });
};

/**
 * Show Contractor Invoice
 * Shows a single Contractor Invoice record.
 */
export const getShowContractorInvoice = <ThrowOnError extends boolean = false>(
  options: Options<GetShowContractorInvoiceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowContractorInvoiceResponse,
    GetShowContractorInvoiceError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/contractor-invoices/{id}',
    ...options,
  });
};

/**
 * List employments
 * Lists all employments, except for the deleted ones.
 *
 * This endpoint requires and returns country-specific data. The exact required and returned fields will
 * vary depending on which country the employment is in. To see the list of parameters for each country,
 * see the **Show form schema** endpoint under the [Countries](#tag/Countries) category.
 *
 * Please note that the compliance requirements for each country are subject to change according to local
 * laws. Given its continual updates, using Remote's [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid
 * compliance issues and to have the latest version of a country requirements.
 *
 * If you are using this endpoint to build an integration, make sure you are dynamically collecting or
 * displaying the latest parameters for each country by querying the _"Show form schema"_ endpoint.
 *
 * For more information on JSON Schemas, see the **How JSON Schemas work** documentation.
 *
 * To learn how you can dynamically generate forms to display in your UI, see the documentation for
 * the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.
 *
 *
 */
export const getIndexEmployment = <ThrowOnError extends boolean = false>(
  options: Options<GetIndexEmploymentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexEmploymentResponse,
    GetIndexEmploymentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/employments',
    ...options,
  });
};

/**
 * Create employment
 * Creates an employment. We support creating employees and contractors.
 *
 * This endpoint requires and returns country-specific data. The exact required and returned fields will
 * vary depending on which country the employment is in. To see the list of parameters for each country,
 * see the **Show form schema** endpoint under the [Countries](#tag/Countries) category.
 *
 * Please note that the compliance requirements for each country are subject to change according to local
 * laws. Given its continual updates, using Remote's [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid
 * compliance issues and to have the latest version of a country requirements.
 *
 * If you are using this endpoint to build an integration, make sure you are dynamically collecting or
 * displaying the latest parameters for each country by querying the _"Show form schema"_ endpoint.
 *
 * For more information on JSON Schemas, see the **How JSON Schemas work** documentation.
 *
 * To learn how you can dynamically generate forms to display in your UI, see the documentation for
 * the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.
 *
 *
 */
export const postCreateEmployment2 = <ThrowOnError extends boolean = false>(
  options: Options<PostCreateEmployment2Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateEmployment2Response,
    PostCreateEmployment2Error,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/employments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List Contractor Invoices
 * Lists Contractor Invoice records.
 */
export const getIndexContractorInvoice = <ThrowOnError extends boolean = false>(
  options?: Options<GetIndexContractorInvoiceData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetIndexContractorInvoiceResponse,
    GetIndexContractorInvoiceError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/contractor-invoices',
    ...options,
  });
};

/**
 * Show the SSO Configuration Details
 * Shows the SSO Configuration details for the company.
 */
export const getDetailsSsoConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetDetailsSsoConfigurationData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetDetailsSsoConfigurationResponse,
    GetDetailsSsoConfigurationError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/sso-configuration/details',
    ...options,
  });
};

/**
 * Creates a cost estimation of employments
 */
export const postCreateEstimation = <ThrowOnError extends boolean = false>(
  options: Options<PostCreateEstimationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateEstimationResponse,
    PostCreateEstimationError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/cost-calculator/estimation',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Show form schema
 * Returns the json schema of the requested company form.
 * Currently only supports the `address_details` form.
 *
 */
export const getShowCompanySchema = <ThrowOnError extends boolean = false>(
  options: Options<GetShowCompanySchemaData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowCompanySchemaResponse,
    GetShowCompanySchemaError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/companies/schema',
    ...options,
  });
};

/**
 * Get employment benefit offers
 */
export const getIndexBenefitOffer = <ThrowOnError extends boolean = false>(
  options: Options<GetIndexBenefitOfferData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexBenefitOfferResponse,
    GetIndexBenefitOfferError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/employments/{employment_id}/benefit-offers',
    ...options,
  });
};

/**
 * Upserts employment benefit offers
 */
export const putUpdateBenefitOffer = <ThrowOnError extends boolean = false>(
  options: Options<PutUpdateBenefitOfferData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutUpdateBenefitOfferResponse,
    PutUpdateBenefitOfferError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/employments/{employment_id}/benefit-offers',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get Employment Profile
 * Gets necessary information to perform the identity verification of an employee.
 *
 */
export const getGetIdentityVerificationDataIdentityVerification = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetGetIdentityVerificationDataIdentityVerificationData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetGetIdentityVerificationDataIdentityVerificationResponse,
    GetGetIdentityVerificationDataIdentityVerificationError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/identity-verification/{employment_id}',
    ...options,
  });
};

/**
 * Pass KYB
 * Pass KYB and credit risk for a company without the intervention of a Remote admin.
 *
 * This endpoint is only available in Sandbox, otherwise it will respond with a 404.
 *
 */
export const postBypassEligibilityChecksCompany = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostBypassEligibilityChecksCompanyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostBypassEligibilityChecksCompanyResponse,
    PostBypassEligibilityChecksCompanyError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/sandbox/companies/{company_id}/bypass-eligibility-checks',
    ...options,
  });
};

/**
 * Get a mock JSON Schema
 * Get a mock JSON Schema for testing purposes
 */
export const getShowTestSchema = <ThrowOnError extends boolean = false>(
  options?: Options<GetShowTestSchemaData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetShowTestSchemaResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/test-schema',
    ...options,
  });
};

/**
 * List all holidays of a country
 * List all holidays of a country for a specific year. Optionally, it can be filtered by country subdivision.
 */
export const getIndexHoliday = <ThrowOnError extends boolean = false>(
  options: Options<GetIndexHolidayData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexHolidayResponse,
    GetIndexHolidayError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/countries/{country_code}/holidays/{year}',
    ...options,
  });
};

/**
 * Cancel Time Off
 * Cancel a time off request that was already approved.
 */
export const postCreateCancellation = <ThrowOnError extends boolean = false>(
  options: Options<PostCreateCancellationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateCancellationResponse,
    PostCreateCancellationError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/timeoff/{timeoff_id}/cancel',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Show employment job
 * Shows an employment job details.
 *
 */
export const getIndexEmploymentJob = <ThrowOnError extends boolean = false>(
  options: Options<GetIndexEmploymentJobData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexEmploymentJobResponse,
    GetIndexEmploymentJobError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/employments/{employment_id}/job',
    ...options,
  });
};

/**
 * List pricing plan partner templates
 * List all pricing plan partner templates.
 *
 */
export const getIndexPricingPlanPartnerTemplate = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetIndexPricingPlanPartnerTemplateData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetIndexPricingPlanPartnerTemplateResponse,
    GetIndexPricingPlanPartnerTemplateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/pricing-plan-partner-templates',
    ...options,
  });
};

/**
 * List EOR Payroll Calendar
 * List all active payroll calendars for EOR.
 */
export const getIndexEorPayrollCalendar = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetIndexEorPayrollCalendarData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetIndexEorPayrollCalendarResponse,
    GetIndexEorPayrollCalendarError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/payroll-calendars',
    ...options,
  });
};

/**
 * List Recurring Incentive
 * List all Recurring Incentives of a company.
 *
 */
export const getIndexRecurringIncentive = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetIndexRecurringIncentiveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexRecurringIncentiveResponse,
    GetIndexRecurringIncentiveError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/incentives/recurring',
    ...options,
  });
};

/**
 * Create Recurring Incentive
 * Create a Recurring Incentive, that is, a monthly paid incentive.
 *
 * Incentives use the currency of the employment specified provided in the `employment_id` field.
 *
 */
export const postCreateRecurringIncentive = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostCreateRecurringIncentiveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateRecurringIncentiveResponse,
    PostCreateRecurringIncentiveError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/incentives/recurring',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Creates a Benefit Renewal Request
 * Creates a Benefit Renewal Request for a specific Benefit Group.
 * This endpoint is only available in Sandbox, otherwise it will respond with a 404.
 *
 */
export const postCreateBenefitRenewalRequest = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostCreateBenefitRenewalRequestData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateBenefitRenewalRequestResponse,
    PostCreateBenefitRenewalRequestError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/sandbox/benefit-renewal-requests',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List expenses
 * Lists all expenses records
 */
export const getIndexExpense = <ThrowOnError extends boolean = false>(
  options: Options<GetIndexExpenseData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexExpenseResponse,
    GetIndexExpenseError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/expenses',
    ...options,
  });
};

/**
 * Create expense
 * Creates an **approved** expense
 */
export const postCreateExpense = <ThrowOnError extends boolean = false>(
  options: Options<PostCreateExpenseData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateExpenseResponse,
    PostCreateExpenseError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/expenses',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Show the current SSO Configuration
 * Shows the current SSO Configuration for the company.
 */
export const getShowSsoConfiguration = <ThrowOnError extends boolean = false>(
  options?: Options<GetShowSsoConfigurationData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetShowSsoConfigurationResponse,
    GetShowSsoConfigurationError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/sso-configuration',
    ...options,
  });
};

/**
 * Create the SSO Configuration
 * Creates the SSO Configuration for the company.
 */
export const postCreateSsoConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostCreateSsoConfigurationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateSsoConfigurationResponse,
    PostCreateSsoConfigurationError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/sso-configuration',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Approve Contract Amendment
 * Approves a contract amendment request without the intervention of a Remote admin.
 * Approvals done via this endpoint are effective immediately,
 * regardless of the effective date entered on the contract amendment creation.
 *
 * This endpoint is only available in Sandbox, otherwise it will respond with a 404.
 *
 */
export const putApproveContractAmendment = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PutApproveContractAmendmentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApproveContractAmendmentResponse,
    PutApproveContractAmendmentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/sandbox/contract-amendments/{contract_amendment_request_id}/approve',
    ...options,
  });
};

/**
 * Show benefit renewal request schema
 * Returns the json schema of the `benefit_renewal_request` form for a specific request.
 * This endpoint requires a company access token, as forms are dependent on certain
 * properties of companies and their current employments.
 *
 */
export const getSchemaBenefitRenewalRequest = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetSchemaBenefitRenewalRequestData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetSchemaBenefitRenewalRequestResponse,
    GetSchemaBenefitRenewalRequestError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/benefit-renewal-requests/{benefit_renewal_request_id}/schema',
    ...options,
  });
};

/**
 * Magic links generator
 * Generates a magic link for a passwordless authentication.
 * To create a magic link for a company admin, you need to provide the `user_id` parameter.
 * To create a magic link for an employee, you need to provide the `employment_id` parameter.
 *
 */
export const postGenerateMagicLink = <ThrowOnError extends boolean = false>(
  options: Options<PostGenerateMagicLinkData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostGenerateMagicLinkResponse,
    PostGenerateMagicLinkError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/magic-link',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete a Recurring Incentive
 * Delete a Recurring Incentive, that is, a monthly paid incentive.
 *
 * Internally, Remote schedules upcoming incentives. As such, when you attempt to
 * delete a recurring incentive, Remote will **ONLY** delete scheduled incentives
 * with the `pending` status.
 *
 * Incentives payments that are already scheduled and cannot be deleted will be
 * included in the response, in case you need to reference them.
 *
 */
export const deleteDeleteRecurringIncentive = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteDeleteRecurringIncentiveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteDeleteRecurringIncentiveResponse,
    DeleteDeleteRecurringIncentiveError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/incentives/recurring/{id}',
    ...options,
  });
};

/**
 * List Incentives
 * Lists all Incentives of a company
 */
export const getIndexIncentive = <ThrowOnError extends boolean = false>(
  options: Options<GetIndexIncentiveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexIncentiveResponse,
    GetIndexIncentiveError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/incentives',
    ...options,
  });
};

/**
 * Create Incentive
 * Creates an Incentive.
 *
 * Incentives use the currency of the employment specified provided in the `employment_id` field.
 *
 */
export const postCreateIncentive = <ThrowOnError extends boolean = false>(
  options: Options<PostCreateIncentiveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateIncentiveResponse,
    PostCreateIncentiveError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/incentives',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Create probation completion letter
 * Create a new probation completion letter request.
 */
export const postCreateProbationCompletionLetter = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostCreateProbationCompletionLetterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateProbationCompletionLetterResponse,
    PostCreateProbationCompletionLetterError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/probation-completion-letter',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Show Contractor Invoice Schedule
 * Shows a single Contractor Invoice Schedule record
 */
export const getShowScheduledContractorInvoice = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetShowScheduledContractorInvoiceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowScheduledContractorInvoiceResponse,
    GetShowScheduledContractorInvoiceError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/contractor-invoice-schedules/{id}',
    ...options,
  });
};

/**
 * Updates Contractor Invoice Schedule
 * Updates a contractor invoice schedule record
 */
export const patchUpdateScheduledContractorInvoice2 = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PatchUpdateScheduledContractorInvoice2Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchUpdateScheduledContractorInvoice2Response,
    PatchUpdateScheduledContractorInvoice2Error,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/contractor-invoice-schedules/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Updates Contractor Invoice Schedule
 * Updates a contractor invoice schedule record
 */
export const patchUpdateScheduledContractorInvoice = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PatchUpdateScheduledContractorInvoiceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PatchUpdateScheduledContractorInvoiceResponse,
    PatchUpdateScheduledContractorInvoiceError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/contractor-invoice-schedules/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Show Billing Document
 * Shows a billing document details.
 *
 * Please contact api-support@remote.com to request access to this endpoint.
 *
 */
export const getShowBillingDocument = <ThrowOnError extends boolean = false>(
  options: Options<GetShowBillingDocumentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowBillingDocumentResponse,
    GetShowBillingDocumentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/billing-documents/{billing_document_id}',
    ...options,
  });
};

/**
 * Creates PDF cost estimation of employments
 * Creates a PDF cost estimation of employments based on the provided parameters.
 */
export const postCreateEstimationPdf = <ThrowOnError extends boolean = false>(
  options?: Options<PostCreateEstimationPdfData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostCreateEstimationPdfResponse,
    PostCreateEstimationPdfError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/cost-calculator/estimation-pdf',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Show work authorization request
 * Show a single work authorization request.
 */
export const getShowWorkAuthorizationRequest = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetShowWorkAuthorizationRequestData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowWorkAuthorizationRequestResponse,
    GetShowWorkAuthorizationRequestError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/work-authorization-requests/{id}',
    ...options,
  });
};

/**
 * Update work authorization request
 * Updates a work authorization request.
 */
export const patchUpdateWorkAuthorizationRequest2 = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PatchUpdateWorkAuthorizationRequest2Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchUpdateWorkAuthorizationRequest2Response,
    PatchUpdateWorkAuthorizationRequest2Error,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/work-authorization-requests/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Update work authorization request
 * Updates a work authorization request.
 */
export const patchUpdateWorkAuthorizationRequest = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PatchUpdateWorkAuthorizationRequestData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PatchUpdateWorkAuthorizationRequestResponse,
    PatchUpdateWorkAuthorizationRequestError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/work-authorization-requests/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Create Probation Extension
 * Create a probation extension request.
 */
export const postCreateProbationExtension = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostCreateProbationExtensionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateProbationExtensionResponse,
    PostCreateProbationExtensionError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/probation-extensions',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Create risk reserve
 * Create a new risk reserve
 */
export const postCreateRiskReserve = <ThrowOnError extends boolean = false>(
  options: Options<PostCreateRiskReserveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateRiskReserveResponse,
    PostCreateRiskReserveError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/risk-reserve',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Show a company
 * Given an ID, shows a company
 */
export const getShowCompany = <ThrowOnError extends boolean = false>(
  options: Options<GetShowCompanyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowCompanyResponse,
    GetShowCompanyError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/companies/{company_id}',
    ...options,
  });
};

/**
 * Update a company
 * Given an ID and a request object with new information, updates a company.
 *
 * ### Getting a company and its owner to `active` status
 * If you created a company using the
 * [create a company endpoint](#tag/Companies/operation/post_create_company) without all the required
 * request body parameters, you can use this endpoint to provide the missing data. Once the company
 * and its owner have all the necessary data, both their statuses will be set to `active` and the company
 * onboarding will be marked as "completed".
 *
 * The following constitutes a company with "all the necessary data":
 * * Complete `address`, with valid `address`, `postal_code`, `country` and `state` parameters (Varies by country. Use the
 * [show form schema endpoint](#tag/Countries/operation/get_show_form_country) to see which address parameters
 * are required).
 * * Company `tax_number` or `registration_number` is not nil
 * * Company `name` is not nil (already required when creating the company)
 * * Company has a `desired_currency` in their bank account (already required when creating the company)
 * * Company has accepted terms of service (already required when creating the company)
 *
 */
export const patchUpdateCompany2 = <ThrowOnError extends boolean = false>(
  options: Options<PatchUpdateCompany2Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchUpdateCompany2Response,
    PatchUpdateCompany2Error,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/companies/{company_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Update a company
 * Given an ID and a request object with new information, updates a company.
 *
 * ### Getting a company and its owner to `active` status
 * If you created a company using the
 * [create a company endpoint](#tag/Companies/operation/post_create_company) without all the required
 * request body parameters, you can use this endpoint to provide the missing data. Once the company
 * and its owner have all the necessary data, both their statuses will be set to `active` and the company
 * onboarding will be marked as "completed".
 *
 * The following constitutes a company with "all the necessary data":
 * * Complete `address`, with valid `address`, `postal_code`, `country` and `state` parameters (Varies by country. Use the
 * [show form schema endpoint](#tag/Countries/operation/get_show_form_country) to see which address parameters
 * are required).
 * * Company `tax_number` or `registration_number` is not nil
 * * Company `name` is not nil (already required when creating the company)
 * * Company has a `desired_currency` in their bank account (already required when creating the company)
 * * Company has accepted terms of service (already required when creating the company)
 *
 */
export const patchUpdateCompany = <ThrowOnError extends boolean = false>(
  options: Options<PatchUpdateCompanyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PatchUpdateCompanyResponse,
    PatchUpdateCompanyError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/companies/{company_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Download a resignation letter
 * Downloads a resignation letter from an employment request.
 */
export const getDownloadResignationLetter = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetDownloadResignationLetterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetDownloadResignationLetterResponse,
    GetDownloadResignationLetterError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/resignations/{offboarding_request_id}/resignation-letter',
    ...options,
  });
};

/**
 * List Contract Amendment
 * List Contract Amendment requests.
 */
export const getIndexContractAmendment = <ThrowOnError extends boolean = false>(
  options: Options<GetIndexContractAmendmentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexContractAmendmentResponse,
    GetIndexContractAmendmentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/contract-amendments',
    ...options,
  });
};

/**
 * Create Contract Amendment
 * Creates a Contract Amendment request.
 *
 * This endpoint requires and returns country-specific data. The exact required and returned fields will
 * vary depending on which country the employment is in. To see the list of parameters for each country,
 * see the **Show form schema** endpoint under the [Contract Amendments](#tag/Contract-Amendments) category.
 *
 * Please note that the compliance requirements for each country are subject to change according to local
 * laws. Given its continual updates, using Remote's [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid
 * compliance issues and to have the latest version of a country requirements.
 *
 * If you are using this endpoint to build an integration, make sure you are dynamically collecting or
 * displaying the latest parameters for each country by querying the _"Show form schema"_ endpoint.
 *
 * For more information on JSON Schemas, see the **How JSON Schemas work** documentation.
 *
 * To learn how you can dynamically generate forms to display in your UI, see the documentation for
 * the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.
 *
 *
 */
export const postCreateContractAmendment = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostCreateContractAmendmentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateContractAmendmentResponse,
    PostCreateContractAmendmentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/contract-amendments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Show Company Payroll Runs
 * Given an ID, shows a payroll run.
 */
export const getShowPayrollRun = <ThrowOnError extends boolean = false>(
  options: Options<GetShowPayrollRunData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowPayrollRunResponse,
    GetShowPayrollRunError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/payroll-runs/{payroll_run_id}',
    ...options,
  });
};

/**
 * @deprecated
 * Download a receipt
 *   Downloads an expense receipt.
 *
 * Deprecated since late February 2024 in favour of **[Download a receipt by id](#tag/Expenses/operation/get_download_by_id_expense_receipt)** endpoint.
 *
 */
export const getDownloadExpenseReceipt = <ThrowOnError extends boolean = false>(
  options: Options<GetDownloadExpenseReceiptData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetDownloadExpenseReceiptResponse,
    GetDownloadExpenseReceiptError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/expenses/{expense_id}/receipt',
    ...options,
  });
};

/**
 * Show travel letter request
 * Show a single travel letter request.
 */
export const getShowTravelLetterRequest = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetShowTravelLetterRequestData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowTravelLetterRequestResponse,
    GetShowTravelLetterRequestError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/travel-letter-requests/{id}',
    ...options,
  });
};

/**
 * Updates a travel letter request
 * Updates a travel letter request
 */
export const patchUpdateTravelLetterRequest2 = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PatchUpdateTravelLetterRequest2Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchUpdateTravelLetterRequest2Response,
    PatchUpdateTravelLetterRequest2Error,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/travel-letter-requests/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Updates a travel letter request
 * Updates a travel letter request
 */
export const patchUpdateTravelLetterRequest = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PatchUpdateTravelLetterRequestData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PatchUpdateTravelLetterRequestResponse,
    PatchUpdateTravelLetterRequestError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/travel-letter-requests/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * @deprecated
 * Show Time Off Balance
 * Shows the time off balance for the given employment_id.
 *
 * Deprecated since February 2025 in favour of **[List Leave Policies Summary](#tag/Leave-Policies/operation/get_index_leave_policies_summary)** endpoint.
 *
 */
export const getShowTimeoffBalance = <ThrowOnError extends boolean = false>(
  options: Options<GetShowTimeoffBalanceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowTimeoffBalanceResponse,
    GetShowTimeoffBalanceError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/timeoff-balances/{employment_id}',
    ...options,
  });
};

/**
 * Show form schema
 * Returns the json schema of a supported form. Possible form names are:
 * ```
 * - address_details
 * - administrative_details
 * - bank_account_details
 * - employment_basic_information
 * - billing_address_details
 * - contract_details
 * - emergency_contact
 * - employment_document_details
 * - personal_details
 * - pricing_plan_details
 * - global_payroll_administrative_details
 * - global_payroll_contract_details
 * - global_payroll_personal_details
 * - benefit_renewal_request
 *
 * ```
 *
 * This endpoint requires a company access token, as forms are dependent on certain
 * properties of companies and their current employments.
 *
 *
 */
export const getShowFormCountry = <ThrowOnError extends boolean = false>(
  options: Options<GetShowFormCountryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowFormCountryResponse,
    GetShowFormCountryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/countries/{country_code}/{form}',
    ...options,
  });
};

/**
 * Download file
 * Downloads a file.
 *
 */
export const getShowFile = <ThrowOnError extends boolean = false>(
  options: Options<GetShowFileData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowFileResponse,
    GetShowFileError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/files/{id}',
    ...options,
  });
};

/**
 * Show Contract Amendment
 * Show a single Contract Amendment request.
 */
export const getShowContractAmendment = <ThrowOnError extends boolean = false>(
  options: Options<GetShowContractAmendmentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowContractAmendmentResponse,
    GetShowContractAmendmentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/contract-amendments/{id}',
    ...options,
  });
};

/**
 * List Company Managers
 * List all company managers of an integration. If filtered by the company_id param,
 * it lists only company managers belonging to the specified company.
 *
 */
export const getIndexCompanyManager = <ThrowOnError extends boolean = false>(
  options: Options<GetIndexCompanyManagerData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexCompanyManagerResponse,
    GetIndexCompanyManagerError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/company-managers',
    ...options,
  });
};

/**
 * Create and invite a Company Manager
 * Create a Company Manager and sends the invitation email for signing in to the Remote Platform.
 */
export const postCreateCompanyManager = <ThrowOnError extends boolean = false>(
  options: Options<PostCreateCompanyManagerData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateCompanyManagerResponse,
    PostCreateCompanyManagerError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/company-managers',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List countries
 * Lists active and processing countries
 */
export const getIndexCountry = <ThrowOnError extends boolean = false>(
  options: Options<GetIndexCountryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexCountryResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/cost-calculator/countries',
    ...options,
  });
};

/**
 * Decline Identity Verification
 * Declines the identity verification of an employee.
 *
 */
export const postDeclineIdentityVerification = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostDeclineIdentityVerificationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostDeclineIdentityVerificationResponse,
    PostDeclineIdentityVerificationError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/identity-verification/{employment_id}/decline',
    ...options,
  });
};

/**
 * List Billing Documents
 * List billing documents for a company
 */
export const getIndexBillingDocument = <ThrowOnError extends boolean = false>(
  options: Options<GetIndexBillingDocumentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexBillingDocumentResponse,
    GetIndexBillingDocumentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/billing-documents',
    ...options,
  });
};

/**
 * Delete a Webhook Callback
 * Delete a callback previously registered for webhooks
 */
export const deleteDeleteWebhookCallback = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteDeleteWebhookCallbackData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteDeleteWebhookCallbackResponse,
    DeleteDeleteWebhookCallbackError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/webhook-callbacks/{id}',
    ...options,
  });
};

/**
 * Update a Webhook Callback
 * Update a callback previously registered for webhooks
 */
export const patchUpdateWebhookCallback = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PatchUpdateWebhookCallbackData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchUpdateWebhookCallbackResponse,
    PatchUpdateWebhookCallbackError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/webhook-callbacks/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List travel letter requests
 * List travel letter requests.
 */
export const getIndexTravelLetterRequest = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetIndexTravelLetterRequestData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetIndexTravelLetterRequestResponse,
    GetIndexTravelLetterRequestError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/travel-letter-requests',
    ...options,
  });
};

/**
 * List Benefit Renewal Requests
 * List Benefit Renewal Requests for each country.
 */
export const getIndexBenefitRenewalRequest = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetIndexBenefitRenewalRequestData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexBenefitRenewalRequestResponse,
    GetIndexBenefitRenewalRequestError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/benefit-renewal-requests',
    ...options,
  });
};

/**
 * Create a Webhook Callback
 * Register a callback to be used for webhooks
 */
export const postCreateWebhookCallback = <ThrowOnError extends boolean = false>(
  options: Options<PostCreateWebhookCallbackData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateWebhookCallbackResponse,
    PostCreateWebhookCallbackError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/webhook-callbacks',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Approve timesheet
 * Approves the given timesheet.
 */
export const postApproveTimesheet = <ThrowOnError extends boolean = false>(
  options: Options<PostApproveTimesheetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApproveTimesheetResponse,
    PostApproveTimesheetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/timesheets/{timesheet_id}/approve',
    ...options,
  });
};

/**
 * Show payslip
 * Given an ID, shows a payslip.
 *
 * Please contact api-support@remote.com to request access to this endpoint.
 *
 */
export const getShowPayslip = <ThrowOnError extends boolean = false>(
  options: Options<GetShowPayslipData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowPayslipResponse,
    GetShowPayslipError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/payslips/{id}',
    ...options,
  });
};

/**
 * List Leave Policies Summary
 * List all the data related to time off for a given employment
 */
export const getIndexLeavePoliciesSummary = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetIndexLeavePoliciesSummaryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexLeavePoliciesSummaryResponse,
    GetIndexLeavePoliciesSummaryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/leave-policies/summary/{employment_id}',
    ...options,
  });
};

/**
 * List Company Departments
 * Lists all departments for the authorized company specified in the request.
 *
 */
export const getIndexCompanyDepartment = <ThrowOnError extends boolean = false>(
  options: Options<GetIndexCompanyDepartmentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexCompanyDepartmentResponse,
    GetIndexCompanyDepartmentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/company-departments',
    ...options,
  });
};

/**
 * Create New Department
 * Creates a new department in the specified company. Department names may be non-unique and must be non-empty with no more than 255 characters (Unicode code points).
 */
export const postCreateCompanyDepartment = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostCreateCompanyDepartmentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateCompanyDepartmentResponse,
    PostCreateCompanyDepartmentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/company-departments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Decline a time off cancellation request
 * Decline a time off cancellation request.
 *
 */
export const postDeclineCancellationRequest = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostDeclineCancellationRequestData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostDeclineCancellationRequestResponse,
    PostDeclineCancellationRequestError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/timeoff/{timeoff_id}/cancel-request/decline',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get a employment benefit offers JSON schema
 */
export const getShowSchema = <ThrowOnError extends boolean = false>(
  options: Options<GetShowSchemaData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowSchemaResponse,
    GetShowSchemaError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/employments/{employment_id}/benefit-offers/schema',
    ...options,
  });
};

/**
 * List timesheets
 * Lists all timesheets.
 */
export const getIndexTimesheet = <ThrowOnError extends boolean = false>(
  options?: Options<GetIndexTimesheetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetIndexTimesheetResponse,
    GetIndexTimesheetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/timesheets',
    ...options,
  });
};

/**
 * Show employment
 * Shows all the information of an employment.
 *
 * This endpoint requires and returns country-specific data. The exact required and returned fields will
 * vary depending on which country the employment is in. To see the list of parameters for each country,
 * see the **Show form schema** endpoint under the [Countries](#tag/Countries) category.
 *
 * Please note that the compliance requirements for each country are subject to change according to local
 * laws. Given its continual updates, using Remote's [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid
 * compliance issues and to have the latest version of a country requirements.
 *
 * If you are using this endpoint to build an integration, make sure you are dynamically collecting or
 * displaying the latest parameters for each country by querying the _"Show form schema"_ endpoint.
 *
 * For more information on JSON Schemas, see the **How JSON Schemas work** documentation.
 *
 * To learn how you can dynamically generate forms to display in your UI, see the documentation for
 * the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.
 *
 *
 */
export const getShowEmployment = <ThrowOnError extends boolean = false>(
  options: Options<GetShowEmploymentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowEmploymentResponse,
    GetShowEmploymentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/employments/{employment_id}',
    ...options,
  });
};

/**
 * Update employment
 * Updates an employment.
 *
 * **For `created` employments:** You can change all basic params and onboarding tasks or perform a per onboarding task update. You can also update basic_information.
 *
 * **For `active` employments:** You can update the manager (`manager_id` field), emergency_contact_details, address_details and work_email.
 *
 * **For `invited` employments:** You can update the work_email.
 *
 * After onboarding, only a limited set of employment data will be available for updates, such as `emergency_contact_details`.
 * If you want to provide additional information for an employment, please make sure to do so **before** the employee is invited.
 * We block updates to some employment data because employees need to agree to amendments in certain cases, such as when there are changes to their contract_details.
 * Currently, these amendments can only be done through the Remote UI.
 *
 * This endpoint requires and returns country-specific data. The exact required and returned fields will
 * vary depending on which country the employment is in. To see the list of parameters for each country,
 * see the **Show form schema** endpoint under the [Countries](#tag/Countries) category.
 *
 * Please note that the compliance requirements for each country are subject to change according to local
 * laws. Given its continual updates, using Remote's [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid
 * compliance issues and to have the latest version of a country requirements.
 *
 * If you are using this endpoint to build an integration, make sure you are dynamically collecting or
 * displaying the latest parameters for each country by querying the _"Show form schema"_ endpoint.
 *
 * For more information on JSON Schemas, see the **How JSON Schemas work** documentation.
 *
 * To learn how you can dynamically generate forms to display in your UI, see the documentation for
 * the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.
 *
 *
 * Please contact Remote if you need to update contractors via API since it's currently not supported.
 *
 */
export const patchUpdateEmployment2 = <ThrowOnError extends boolean = false>(
  options: Options<PatchUpdateEmployment2Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchUpdateEmployment2Response,
    PatchUpdateEmployment2Error,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/employments/{employment_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Update employment
 * Updates an employment.
 *
 * **For `created` employments:** You can change all basic params and onboarding tasks or perform a per onboarding task update. You can also update basic_information.
 *
 * **For `active` employments:** You can update the manager (`manager_id` field), emergency_contact_details, address_details and work_email.
 *
 * **For `invited` employments:** You can update the work_email.
 *
 * After onboarding, only a limited set of employment data will be available for updates, such as `emergency_contact_details`.
 * If you want to provide additional information for an employment, please make sure to do so **before** the employee is invited.
 * We block updates to some employment data because employees need to agree to amendments in certain cases, such as when there are changes to their contract_details.
 * Currently, these amendments can only be done through the Remote UI.
 *
 * This endpoint requires and returns country-specific data. The exact required and returned fields will
 * vary depending on which country the employment is in. To see the list of parameters for each country,
 * see the **Show form schema** endpoint under the [Countries](#tag/Countries) category.
 *
 * Please note that the compliance requirements for each country are subject to change according to local
 * laws. Given its continual updates, using Remote's [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid
 * compliance issues and to have the latest version of a country requirements.
 *
 * If you are using this endpoint to build an integration, make sure you are dynamically collecting or
 * displaying the latest parameters for each country by querying the _"Show form schema"_ endpoint.
 *
 * For more information on JSON Schemas, see the **How JSON Schemas work** documentation.
 *
 * To learn how you can dynamically generate forms to display in your UI, see the documentation for
 * the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.
 *
 *
 * Please contact Remote if you need to update contractors via API since it's currently not supported.
 *
 */
export const patchUpdateEmployment = <ThrowOnError extends boolean = false>(
  options: Options<PatchUpdateEmploymentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PatchUpdateEmploymentResponse,
    PatchUpdateEmploymentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/employments/{employment_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List Company Payroll Calendar
 * List all payroll calendars for the company within the requested cycle.
 */
export const getIndexPayrollCalendar = <ThrowOnError extends boolean = false>(
  options: Options<GetIndexPayrollCalendarData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexPayrollCalendarResponse,
    GetIndexPayrollCalendarError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/payroll-calendars/{cycle}',
    ...options,
  });
};

/**
 * Show region fields
 * Returns required fields JSON Schema for a given region. These are required in order to calculate
 * the cost of employment for the region. These fields are based on employer contributions that are associated
 * with the region or any of it's parent regions.
 */
export const getShowRegionField = <ThrowOnError extends boolean = false>(
  options: Options<GetShowRegionFieldData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowRegionFieldResponse,
    GetShowRegionFieldError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/cost-calculator/regions/{slug}/fields',
    ...options,
  });
};

/**
 * Show Offboarding
 * Shows an Offboarding request.
 */
export const getShowOffboarding = <ThrowOnError extends boolean = false>(
  options: Options<GetShowOffboardingData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowOffboardingResponse,
    GetShowOffboardingError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/offboardings/{id}',
    ...options,
  });
};

/**
 * Create employment
 * Creates an employment without provisional_start_date validation.
 *
 * This endpoint is only available in Sandbox and allows creating employments which
 * `provisional_start_date` is in the past. This is especially helpful for:
 * * Testing the Timeoff Balance endpoints
 * * Testing the Offboarding endpoints
 * * Testing features around probation periods
 *
 * This endpoint will respond with a 404 outside of the Sandbox environment.
 *
 * For creating an employment's parameters outside of testing purposes, use [this
 * Employment create endpoint](#operation/post_create_employment)
 *
 */
export const postCreateEmployment = <ThrowOnError extends boolean = false>(
  options: Options<PostCreateEmploymentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateEmploymentResponse,
    PostCreateEmploymentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/sandbox/employments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List countries
 * Returns a list of all countries that are supported by Remote API alphabetically ordered. The supported list accounts for creating employment with basic information and it does not imply fully onboarding employment via JSON Schema.
 *
 */
export const getSupportedCountry = <ThrowOnError extends boolean = false>(
  options: Options<GetSupportedCountryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetSupportedCountryResponse,
    GetSupportedCountryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/countries',
    ...options,
  });
};

/**
 * Complete onboarding
 * Completes the employee onboarding. When all tasks are completed, the employee is marked as in `review` status
 */
export const postCompleteOnboardingEmployment = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostCompleteOnboardingEmploymentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCompleteOnboardingEmploymentResponse,
    PostCompleteOnboardingEmploymentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/ready',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List Leave Policies Details
 * Describe the leave policies (custom or not) for a given employment
 */
export const getIndexLeavePoliciesDetails = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetIndexLeavePoliciesDetailsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexLeavePoliciesDetailsResponse,
    GetIndexLeavePoliciesDetailsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/leave-policies/details/{employment_id}',
    ...options,
  });
};

/**
 * List Time Off Types
 * Lists all time off types that can be used for the `timeoff_type` parameter
 */
export const getTimeoffTypesTimeoff = <ThrowOnError extends boolean = false>(
  options: Options<GetTimeoffTypesTimeoffData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetTimeoffTypesTimeoffResponse,
    GetTimeoffTypesTimeoffError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/timeoff/types',
    ...options,
  });
};

/**
 * Trigger a Webhook
 * Triggers a callback previously registered for webhooks. Use this endpoint to
 * emit a webhook for testing in the Sandbox environment. This endpoint will
 * respond with a 404 outside of the Sandbox environment.
 *
 */
export const postTriggerWebhookCallback = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostTriggerWebhookCallbackData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostTriggerWebhookCallbackResponse,
    PostTriggerWebhookCallbackError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/sandbox/webhook-callbacks/trigger',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Download payslip in the PDF format
 * Given a Payslip ID, downloads a payslip.
 * It is important to note that each country has a different payslip format and they are not authored by Remote.
 *
 */
export const getDownloadPayslipPayslip = <ThrowOnError extends boolean = false>(
  options: Options<GetDownloadPayslipPayslipData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetDownloadPayslipPayslipResponse,
    GetDownloadPayslipPayslipError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/payslips/{payslip_id}/pdf',
    ...options,
  });
};

/**
 * Show Time Off
 * Shows a single Time Off record
 */
export const getShowTimeoff = <ThrowOnError extends boolean = false>(
  options: Options<GetShowTimeoffData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowTimeoffResponse,
    GetShowTimeoffError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/timeoff/{id}',
    ...options,
  });
};

/**
 * Update Time Off
 * Updates a Time Off record.
 * Warning: Updating the status of a time off through this endpoint is deprecated and will be removed on January 13, 2025.
 * To approve or cancel an approved time off, use the `/approve` and `/cancel` endpoints instead.
 *
 */
export const patchUpdateTimeoff2 = <ThrowOnError extends boolean = false>(
  options: Options<PatchUpdateTimeoff2Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchUpdateTimeoff2Response,
    PatchUpdateTimeoff2Error,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/timeoff/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Update Time Off
 * Updates a Time Off record.
 * Warning: Updating the status of a time off through this endpoint is deprecated and will be removed on January 13, 2025.
 * To approve or cancel an approved time off, use the `/approve` and `/cancel` endpoints instead.
 *
 */
export const patchUpdateTimeoff = <ThrowOnError extends boolean = false>(
  options: Options<PatchUpdateTimeoffData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PatchUpdateTimeoffResponse,
    PatchUpdateTimeoffError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/timeoff/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Decline Time Off
 * Decline a time off request. Please note that only time off requests on the `requested` status can be declined.
 */
export const postCreateDecline = <ThrowOnError extends boolean = false>(
  options: Options<PostCreateDeclineData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateDeclineResponse,
    PostCreateDeclineError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/timeoff/{timeoff_id}/decline',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Automatable Contract Amendment
 * Check if a contract amendment request is automatable.
 * If the contract amendment request is automatable, then after submission, it will instantly amend the employee's contract
 * and send them an updated document.
 *
 * This endpoint requires and returns country-specific data. The exact required and returned fields will
 * vary depending on which country the employment is in. To see the list of parameters for each country,
 * see the **Show form schema** endpoint under the [Contract Amendments](#tag/Contract-Amendments) category.
 *
 * Please note that the compliance requirements for each country are subject to change according to local
 * laws. Given its continual updates, using Remote's [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid
 * compliance issues and to have the latest version of a country requirements.
 *
 * If you are using this endpoint to build an integration, make sure you are dynamically collecting or
 * displaying the latest parameters for each country by querying the _"Show form schema"_ endpoint.
 *
 * For more information on JSON Schemas, see the **How JSON Schemas work** documentation.
 *
 * To learn how you can dynamically generate forms to display in your UI, see the documentation for
 * the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.
 *
 *
 */
export const postAutomatableContractAmendment = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAutomatableContractAmendmentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAutomatableContractAmendmentResponse,
    PostAutomatableContractAmendmentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/contract-amendments/automatable',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Approve Time Off
 * Approve a time off request.
 */
export const postCreateApproval = <ThrowOnError extends boolean = false>(
  options: Options<PostCreateApprovalData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateApprovalResponse,
    PostCreateApprovalError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/timeoff/{timeoff_id}/approve',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Lists custom fields definitions
 * Returns custom fields definitions
 */
export const getIndexEmploymentCustomField = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetIndexEmploymentCustomFieldData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetIndexEmploymentCustomFieldResponse,
    GetIndexEmploymentCustomFieldError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/custom-fields',
    ...options,
  });
};

/**
 * Create Custom Field Definition
 * Creates a new custom field definition.
 */
export const postCreateEmploymentCustomField = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostCreateEmploymentCustomFieldData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateEmploymentCustomFieldResponse,
    PostCreateEmploymentCustomFieldError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/custom-fields',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List company supported currencies
 * List company supported currencies
 */
export const getIndexCompanyCurrency = <ThrowOnError extends boolean = false>(
  options?: Options<GetIndexCompanyCurrencyData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetIndexCompanyCurrencyResponse,
    GetIndexCompanyCurrencyError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/company-currencies',
    ...options,
  });
};

/**
 * Update employment
 * Updates an employment. Use this endpoint to modify employment states for testing
 * in the Sandbox environment. This endpoint will respond with a 404 outside of the
 * Sandbox environment.
 *
 * For updating an employment's parameters outside of testing purposes, use [this
 * Employment update endpoint](#operation/patch_update_employment).
 *
 */
export const patchUpdateEmployment4 = <ThrowOnError extends boolean = false>(
  options: Options<PatchUpdateEmployment4Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchUpdateEmployment4Response,
    PatchUpdateEmployment4Error,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/sandbox/employments/{employment_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Update employment
 * Updates an employment. Use this endpoint to modify employment states for testing
 * in the Sandbox environment. This endpoint will respond with a 404 outside of the
 * Sandbox environment.
 *
 * For updating an employment's parameters outside of testing purposes, use [this
 * Employment update endpoint](#operation/patch_update_employment).
 *
 */
export const patchUpdateEmployment3 = <ThrowOnError extends boolean = false>(
  options: Options<PatchUpdateEmployment3Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PatchUpdateEmployment3Response,
    PatchUpdateEmployment3Error,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/sandbox/employments/{employment_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get employment contract pending changes
 * Get all the pending changes (waiting for aproval or signature) for the employment contract.
 */
export const getPendingChangesEmploymentContract = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetPendingChangesEmploymentContractData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetPendingChangesEmploymentContractResponse,
    GetPendingChangesEmploymentContractError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/employment-contracts/{employment_id}/pending-changes',
    ...options,
  });
};

/**
 * Show Resignation
 * Shows the details of a resignation with status `submitted`.
 */
export const getShowResignation = <ThrowOnError extends boolean = false>(
  options: Options<GetShowResignationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowResignationResponse,
    GetShowResignationError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/resignations/{offboarding_request_id}',
    ...options,
  });
};

/**
 * Upload file
 * Uploads a file associated with a specified employment.
 *
 * Please contact api-support@remote.com to request access to this endpoint.
 *
 */
export const postUploadEmployeeFileFile = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostUploadEmployeeFileFileData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostUploadEmployeeFileFileResponse,
    PostUploadEmployeeFileFileError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/documents',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  });
};

/**
 * Invite employment
 * Invite an employment to start the self-enrollment.
 *
 * Requirements for the invitation to succeed:
 *
 * * Employment needs to have the following JSON Schema forms filled: `contract_details` and `pricing_plan_details`
 * * `provisional_start_date` must consider the minimum onboarding time of the employment's country
 *
 * If there are validations errors, they are returned with a Conflict HTTP Status (409) and a descriptive message.
 * HTTP Status OK (200) is returned in case of success.
 *
 * In case of the following error message:
 * `"Please reselect benefits - the previous selection is no longer available"`
 * it means that the benefit options have been updated and the employment's benefits are no longer compliant with the new schema.
 *
 * In this case, reselect benefits by updating `contract_details` JSON Schema form.
 *
 */
export const postInviteEmploymentInvitation = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostInviteEmploymentInvitationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostInviteEmploymentInvitationResponse,
    PostInviteEmploymentInvitationError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/employments/{employment_id}/invite',
    ...options,
  });
};

/**
 * Show expense
 * Shows a single expense record
 */
export const getShowExpense = <ThrowOnError extends boolean = false>(
  options: Options<GetShowExpenseData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowExpenseResponse,
    GetShowExpenseError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/expenses/{id}',
    ...options,
  });
};

/**
 * Update an expense
 * Updates an expense
 */
export const patchUpdateExpense2 = <ThrowOnError extends boolean = false>(
  options: Options<PatchUpdateExpense2Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchUpdateExpense2Response,
    PatchUpdateExpense2Error,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/expenses/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Update an expense
 * Updates an expense
 */
export const patchUpdateExpense = <ThrowOnError extends boolean = false>(
  options: Options<PatchUpdateExpenseData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PatchUpdateExpenseResponse,
    PatchUpdateExpenseError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/expenses/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Show Benefit Renewal Request
 * Show Benefit Renewal Request details.
 */
export const getShowBenefitRenewalRequest = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetShowBenefitRenewalRequestData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowBenefitRenewalRequestResponse,
    GetShowBenefitRenewalRequestError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/benefit-renewal-requests/{benefit_renewal_request_id}',
    ...options,
  });
};

/**
 * Updates a Benefit Renewal Request Response
 * Updates a Benefit Renewal Request with the given response.
 */
export const postUpdateBenefitRenewalRequest = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostUpdateBenefitRenewalRequestData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostUpdateBenefitRenewalRequestResponse,
    PostUpdateBenefitRenewalRequestError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/benefit-renewal-requests/{benefit_renewal_request_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List company structure nodes
 * Shows all the company structure nodes of an employment.
 *
 */
export const getIndexEmploymentCompanyStructureNode = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetIndexEmploymentCompanyStructureNodeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexEmploymentCompanyStructureNodeResponse,
    GetIndexEmploymentCompanyStructureNodeError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/employments/{employment_id}/company-structure-nodes',
    ...options,
  });
};

/**
 * List custom field value for an employment
 * Returns a list of custom field values for a given employment
 */
export const getIndexEmploymentCustomFieldValue = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetIndexEmploymentCustomFieldValueData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexEmploymentCustomFieldValueResponse,
    GetIndexEmploymentCustomFieldValueError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/employments/{employment_id}/custom-fields',
    ...options,
  });
};

/**
 * Validate resignation request
 * Validates a resignation employment request
 */
export const putValidateResignation = <ThrowOnError extends boolean = false>(
  options: Options<PutValidateResignationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutValidateResignationResponse,
    PutValidateResignationError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/resignations/{offboarding_request_id}/validate',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Show a custom field value
 * Returns a custom field value for a given employment
 */
export const getShowEmploymentCustomFieldValue = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetShowEmploymentCustomFieldValueData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowEmploymentCustomFieldValueResponse,
    GetShowEmploymentCustomFieldValueError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/custom-fields/{custom_field_id}/values/{employment_id}',
    ...options,
  });
};

/**
 * Update a Custom Field Value
 * Updates a custom field value for a given employment.
 */
export const patchUpdateEmploymentCustomFieldValue2 = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PatchUpdateEmploymentCustomFieldValue2Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchUpdateEmploymentCustomFieldValue2Response,
    PatchUpdateEmploymentCustomFieldValue2Error,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/custom-fields/{custom_field_id}/values/{employment_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Update a Custom Field Value
 * Updates a custom field value for a given employment.
 */
export const patchUpdateEmploymentCustomFieldValue = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PatchUpdateEmploymentCustomFieldValueData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PatchUpdateEmploymentCustomFieldValueResponse,
    PatchUpdateEmploymentCustomFieldValueError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/custom-fields/{custom_field_id}/values/{employment_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get token identity
 * Shows information about the entities that can be controlled by the current auth token.
 *
 */
export const getCurrentIdentity = <ThrowOnError extends boolean = false>(
  options: Options<GetCurrentIdentityData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCurrentIdentityResponse,
    GetCurrentIdentityError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/identity/current',
    ...options,
  });
};

/**
 * Delete an Incentive
 * Delete an incentive.
 *
 * `one_time` incentives that have the following status **CANNOT** be deleted:
 * * `processing`
 * * `paid`
 *
 */
export const deleteDeleteIncentive = <ThrowOnError extends boolean = false>(
  options: Options<DeleteDeleteIncentiveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteDeleteIncentiveResponse,
    DeleteDeleteIncentiveError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/incentives/{id}',
    ...options,
  });
};

/**
 * Show Incentive
 * Show an Incentive's details
 */
export const getShowIncentive = <ThrowOnError extends boolean = false>(
  options: Options<GetShowIncentiveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowIncentiveResponse,
    GetShowIncentiveError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/incentives/{id}',
    ...options,
  });
};

/**
 * Update Incentive
 * Updates an Incentive.
 *
 * Incentives use the currency of the employment specified provided in the `employment_id` field.
 *
 * The API doesn't support updating paid incentives.
 *
 */
export const patchUpdateIncentive2 = <ThrowOnError extends boolean = false>(
  options: Options<PatchUpdateIncentive2Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchUpdateIncentive2Response,
    PatchUpdateIncentive2Error,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/incentives/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Update Incentive
 * Updates an Incentive.
 *
 * Incentives use the currency of the employment specified provided in the `employment_id` field.
 *
 * The API doesn't support updating paid incentives.
 *
 */
export const patchUpdateIncentive = <ThrowOnError extends boolean = false>(
  options: Options<PatchUpdateIncentiveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PatchUpdateIncentiveResponse,
    PatchUpdateIncentiveError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/incentives/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List work authorization requests
 * List work authorization requests.
 */
export const getIndexWorkAuthorizationRequest = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetIndexWorkAuthorizationRequestData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetIndexWorkAuthorizationRequestResponse,
    GetIndexWorkAuthorizationRequestError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/work-authorization-requests',
    ...options,
  });
};

/**
 * List Benefit Offers
 * List benefit offers for each country.
 *
 */
export const getIndexBenefitOffersCountrySummary = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetIndexBenefitOffersCountrySummaryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexBenefitOffersCountrySummaryResponse,
    GetIndexBenefitOffersCountrySummaryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/benefit-offers/country-summaries',
    ...options,
  });
};

/**
 * List Benefit Offers By Employment
 * List benefit offers by employment.
 *
 */
export const getIndexBenefitOffersByEmployment = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetIndexBenefitOffersByEmploymentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexBenefitOffersByEmploymentResponse,
    GetIndexBenefitOffersByEmploymentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/benefit-offers',
    ...options,
  });
};

/**
 * Cancel Contract Amendment
 * Use this endpoint to cancel an existing contract amendment request.
 *
 * This endpoint is only available in Sandbox, otherwise it will respond with a 404.
 *
 */
export const putCancelContractAmendment = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PutCancelContractAmendmentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutCancelContractAmendmentResponse,
    PutCancelContractAmendmentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/sandbox/contract-amendments/{contract_amendment_request_id}/cancel',
    ...options,
  });
};

/**
 * Show Probation Extension
 * Shows a Probation Extension Request.
 *
 */
export const getShowProbationExtension = <ThrowOnError extends boolean = false>(
  options: Options<GetShowProbationExtensionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowProbationExtensionResponse,
    GetShowProbationExtensionError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/probation-extensions/{id}',
    ...options,
  });
};

/**
 * List payslips
 * Lists all payslips belonging to a company. Can also filter for a single employment belonging
 * to that company.
 *
 */
export const getIndexPayslip = <ThrowOnError extends boolean = false>(
  options?: Options<GetIndexPayslipData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetIndexPayslipResponse,
    GetIndexPayslipError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/payslips',
    ...options,
  });
};

/**
 * Download a receipt by id
 * Download a receipt by id.
 */
export const getDownloadByIdExpenseReceipt = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetDownloadByIdExpenseReceiptData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetDownloadByIdExpenseReceiptResponse,
    GetDownloadByIdExpenseReceiptError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/expenses/{expense_id}/receipts/{receipt_id}',
    ...options,
  });
};

/**
 * Token
 * Endpoint to exchange tokens in the Authorization Code, Client Credentials and Refresh Token flows
 */
export const postTokenOAuth2Token = <ThrowOnError extends boolean = false>(
  options: Options<PostTokenOAuth2TokenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostTokenOAuth2TokenResponse,
    PostTokenOAuth2TokenError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/oauth2/token',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List Time Off
 * Lists all Time Off records.
 */
export const getIndexTimeoff = <ThrowOnError extends boolean = false>(
  options: Options<GetIndexTimeoffData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexTimeoffResponse,
    GetIndexTimeoffError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/timeoff',
    ...options,
  });
};

/**
 * Create Time Off
 * Creates a Time Off record
 */
export const postCreateTimeoff = <ThrowOnError extends boolean = false>(
  options: Options<PostCreateTimeoffData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateTimeoffResponse,
    PostCreateTimeoffError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/timeoff',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List Company Payroll Runs
 * Lists all payroll runs for a company
 */
export const getIndexPayrollRun = <ThrowOnError extends boolean = false>(
  options?: Options<GetIndexPayrollRunData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetIndexPayrollRunResponse,
    GetIndexPayrollRunError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/payroll-runs',
    ...options,
  });
};

/**
 * List Employment Contract.
 * Get the employment contract history for a given employment. If `only_active` is true, it will return only the active or last active contract.
 */
export const getIndexEmploymentContract = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetIndexEmploymentContractData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexEmploymentContractResponse,
    GetIndexEmploymentContractError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/employment-contracts',
    ...options,
  });
};

/**
 * List all companies
 * List all companies that authorized your integration to act on their behalf. In other words, these are all the companies that your integration can manage. Any company that has completed the authorization flow for your integration will be included in the response.
 */
export const getIndexCompany = <ThrowOnError extends boolean = false>(
  options: Options<GetIndexCompanyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetIndexCompanyResponse,
    GetIndexCompanyError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/companies',
    ...options,
  });
};

/**
 * Create a company
 *   Creates a new company.
 *
 * ### Creating a company with only the required request body parameters
 * When you call this endpoint and omit all the optional parameters in the request body,
 * the following resources get created upon a successful response:
 * * A new company with status `pending`.
 * * A company owner for the new company with status `initiated`.
 *
 * See the [update a company endpoint](#tag/Companies/operation/patch_update_company) for
 * more details on how to get your company and its owner to `active` status.
 *
 * If you'd like to create a company and its owner with `active` status in a single request,
 * please provide the optional `address_details` parameter as well.
 *
 * ### Accepting the Terms of Service
 *
 * A required step for creating a company in Remote is to accept our Terms of Service (ToS).
 *
 * Company managers need to be aware of our Terms of Service and Privacy Policy,
 * hence **it's the responsibility of our partners to advise and ensure company managers read
 * and accept the ToS**. The terms have to be accepted only once, before creating a company,
 * and the Remote API will collect the acceptance timestamp as its confirmation.
 *
 * To ensure users read the most recent version of Remote's Terms of Service, their **acceptance
 * must be done within the last fifteen minutes prior the company creation action**.
 *
 * To retrieve this information, partners can provide an element with any text and a description
 * explaining that by performing that action they are accepting Remote's Term of Service. For
 * instance, the partner can add a checkbox or a "Create Remote Account" button followed by a
 * description saying "By creating an account, you agree to
 * [Remote's Terms of Service](https://remote.com/terms-of-service). Also see Remote's
 * [Privacy Policy](https://remote.com/privacy-policy)".
 *
 */
export const postCreateCompany = <ThrowOnError extends boolean = false>(
  options: Options<PostCreateCompanyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostCreateCompanyResponse,
    PostCreateCompanyError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/companies',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Send back a timesheet for review or modification
 * Sends the given timesheet back to the employee for review or modification.
 */
export const postSendBackTimesheet = <ThrowOnError extends boolean = false>(
  options: Options<PostSendBackTimesheetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostSendBackTimesheetResponse,
    PostSendBackTimesheetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/timesheets/{timesheet_id}/send-back',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Deletes a Company Manager user
 * Deletes a Company Manager user
 */
export const deleteDeleteCompanyManager = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteDeleteCompanyManagerData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteDeleteCompanyManagerResponse,
    DeleteDeleteCompanyManagerError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/company-managers/{user_id}',
    ...options,
  });
};

/**
 * Show company manager user
 * Shows a single company manager user
 */
export const getShowCompanyManager = <ThrowOnError extends boolean = false>(
  options: Options<GetShowCompanyManagerData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetShowCompanyManagerResponse,
    GetShowCompanyManagerError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/company-managers/{user_id}',
    ...options,
  });
};

/**
 * List Contractor Invoice Schedules
 * Lists Contractor Invoice Schedule records.
 */
export const getIndexScheduledContractorInvoice = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetIndexScheduledContractorInvoiceData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetIndexScheduledContractorInvoiceResponse,
    GetIndexScheduledContractorInvoiceError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/contractor-invoice-schedules',
    ...options,
  });
};

/**
 * Create Contractor Invoice Schedules
 * Creates many invoice schedules records.
 * It's supposed to return two lists: one containing created records, and another one containing the schedules that failed to be inserted.
 *
 */
export const postBulkCreateScheduledContractorInvoice = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostBulkCreateScheduledContractorInvoiceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostBulkCreateScheduledContractorInvoiceResponse,
    PostBulkCreateScheduledContractorInvoiceError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/contractor-invoice-schedules',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get Billing Document Breakdown
 * Get billing document breakdown
 */
export const getGetBreakdownBillingDocument = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetGetBreakdownBillingDocumentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetGetBreakdownBillingDocumentResponse,
    GetGetBreakdownBillingDocumentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/billing-documents/{billing_document_id}/breakdown',
    ...options,
  });
};

/**
 * Approve a time off cancellation request
 * Approve a time off cancellation request.
 * In order to approve a time off cancellation request, the timeoff status must be `cancel_requested`.
 *
 */
export const postApproveCancellationRequest = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApproveCancellationRequestData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApproveCancellationRequestResponse,
    PostApproveCancellationRequestError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/timeoff/{timeoff_id}/cancel-request/approve',
    ...options,
  });
};

/**
 * Verify Employment Identity
 * Endpoint to confirms the employment profile is from the actual employee
 *
 */
export const postVerifyIdentityVerification = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostVerifyIdentityVerificationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostVerifyIdentityVerificationResponse,
    PostVerifyIdentityVerificationError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/identity-verification/{employment_id}/verify',
    ...options,
  });
};

/**
 * Download a billing document PDF
 * Downloads a billing document PDF
 */
export const getDownloadPdfBillingDocument = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetDownloadPdfBillingDocumentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetDownloadPdfBillingDocumentResponse,
    GetDownloadPdfBillingDocumentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/v1/billing-documents/{billing_document_id}/pdf',
    ...options,
  });
};
